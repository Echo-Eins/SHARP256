// tests/integration_tests.rs
//! –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π NAT —Å–∏—Å—Ç–µ–º—ã SHARP3
//!
//! –≠—Ç–∏ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–µ—Ä—è—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ NAT —Å–∏—Å—Ç–µ–º—ã
//! –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–µ–≥—Ä–µ—Å—Å–∏–π.

use std::sync::Arc;
use std::time::Duration;
use tokio::net::UdpSocket;
use tokio::time::{timeout, sleep};
use tracing::{info, debug};

use SHARP3::nat::{
    // –û—Å–Ω–æ–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
    NatSystem, NatSystemConfig,

    // –ú–µ–Ω–µ–¥–∂–µ—Ä—ã
    StunTurnManager, StunTurnConfig, create_stun_turn_manager,
    Sharp3IceIntegration, IceParameters, create_ice_session_with_sharp,

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    TurnServerInfo, TurnTransport, IceRole, IceGatheringConfig,
    QualityThresholds,

    // –£—Ç–∏–ª–∏—Ç—ã
    default_stun_servers, create_controlling_session_config,

    // –û—à–∏–±–∫–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    NatResult, NatError,

    // ICE
    ice::{IceConfig, IceAgent, IceNatManager, validate_ice_config, create_p2p_ice_config},
};

/// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
fn setup_test_logging() {
    let _ = tracing_subscriber::fmt()
        .with_env_filter("debug")
        .with_test_writer()
        .try_init();
}

#[tokio::test]
async fn test_stun_turn_manager_creation_and_basic_ops() -> NatResult<()> {
    setup_test_logging();
    info!("üß™ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π STUN/TURN –º–µ–Ω–µ–¥–∂–µ—Ä–∞");

    // –°–æ–∑–¥–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    let stun_servers = vec!["stun.l.google.com:19302".to_string()];
    let turn_servers = vec![];

    let manager = create_stun_turn_manager(stun_servers, turn_servers, false).await?;

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–∑–¥–∞–Ω
    assert!(!manager.get_stats().stun_requests.load(std::sync::atomic::Ordering::Relaxed) != 0 || true);

    // –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Å–æ–∫–µ—Ç
    let socket = Arc::new(UdpSocket::bind("127.0.0.1:0").await.unwrap());
    let component_id = 1;

    // –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–ª—É—á–∏—Ç—å server reflexive –∫–∞–Ω–¥–∏–¥–∞—Ç
    let result = timeout(
        Duration::from_secs(5),
        manager.get_server_reflexive_candidate(socket.clone(), component_id)
    ).await;

    match result {
        Ok(Ok(Some(_candidate))) => {
            info!("‚úÖ Server reflexive –∫–∞–Ω–¥–∏–¥–∞—Ç –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ");
        }
        Ok(Ok(None)) => {
            info!("‚ÑπÔ∏è Server reflexive –∫–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω (–æ–∂–∏–¥–∞–µ—Ç—Å—è –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å—Ä–µ–¥–∞—Ö)");
        }
        Ok(Err(e)) => {
            debug!("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è server reflexive –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {} (–æ–∂–∏–¥–∞–µ—Ç—Å—è –≤ —Ç–µ—Å—Ç–∞—Ö)", e);
        }
        Err(_) => {
            debug!("‚è∞ –¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è server reflexive –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (–æ–∂–∏–¥–∞–µ—Ç—Å—è –≤ —Ç–µ—Å—Ç–∞—Ö)");
        }
    }

    // –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–ª—É—á–∏—Ç—å relay –∫–∞–Ω–¥–∏–¥–∞—Ç (–¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å None –±–µ–∑ TURN —Å–µ—Ä–≤–µ—Ä–æ–≤)
    let relay_result = manager.get_relay_candidate(socket, component_id).await?;
    assert!(relay_result.is_none(), "Relay –∫–∞–Ω–¥–∏–¥–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None –±–µ–∑ TURN —Å–µ—Ä–≤–µ—Ä–æ–≤");

    // –ó–∞–≤–µ—Ä—à–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä
    manager.shutdown().await?;

    info!("‚úÖ –¢–µ—Å—Ç STUN/TURN –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–π–¥–µ–Ω");
    Ok(())
}

#[tokio::test]
async fn test_ice_integration_creation_and_gathering() -> NatResult<()> {
    setup_test_logging();
    info!("üß™ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è ICE –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏ —Å–±–æ—Ä–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤");

    // –°–æ–∑–¥–∞—Ç—å STUN/TURN –º–µ–Ω–µ–¥–∂–µ—Ä
    let stun_turn_manager = Arc::new(
        create_stun_turn_manager(
            vec!["stun.l.google.com:19302".to_string()],
            vec![],
            false
        ).await?
    );

    // –°–æ–∑–¥–∞—Ç—å ICE –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    let ice_params = IceParameters::default();

    // –°–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
    let integration = Sharp3IceIntegration::new(stun_turn_manager, ice_params).await?;

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    let stats = integration.get_stats();
    assert_eq!(stats.total_sessions.load(std::sync::atomic::Ordering::Relaxed), 0);
    assert_eq!(stats.total_candidates.load(std::sync::atomic::Ordering::Relaxed), 0);

    // –°–æ–∑–¥–∞—Ç—å —Å–æ–∫–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    let socket = Arc::new(UdpSocket::bind("127.0.0.1:0").await.unwrap());
    let session_id = "test_session".to_string();

    // –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é —Å–±–æ—Ä–∞
    integration.start_gathering_session(session_id.clone(), socket).await?;

    // –ü–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–±–æ—Ä–∞
    sleep(Duration::from_millis(500)).await;

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã —Å–æ–±—Ä–∞–Ω—ã
    let candidates = integration.get_candidates_for_component(1).await;
    assert!(!candidates.is_empty(), "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω host –∫–∞–Ω–¥–∏–¥–∞—Ç");

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∏–ø—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    let has_host = candidates.iter().any(|c| c.candidate_type == SHARP3::nat::ice::CandidateType::Host);
    assert!(has_host, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å host –∫–∞–Ω–¥–∏–¥–∞—Ç");

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    let updated_stats = integration.get_stats();
    assert!(updated_stats.total_candidates.load(std::sync::atomic::Ordering::Relaxed) > 0);
    assert!(updated_stats.host_candidates.load(std::sync::atomic::Ordering::Relaxed) > 0);

    // –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
    integration.shutdown().await?;

    info!("‚úÖ –¢–µ—Å—Ç ICE –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω");
    Ok(())
}

#[tokio::test]
async fn test_ice_agent_creation_and_basic_functionality() -> NatResult<()> {
    setup_test_logging();
    info!("üß™ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è ICE –∞–≥–µ–Ω—Ç–∞ –∏ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏");

    // –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é ICE
    let config = create_p2p_ice_config();

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    validate_ice_config(&config)?;

    // –°–æ–∑–¥–∞—Ç—å ICE –∞–≥–µ–Ω—Ç
    let agent = IceAgent::new(config).await?;

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    let initial_state = agent.get_state().await;
    assert_eq!(initial_state, SHARP3::nat::ice::IceState::Gathering);

    // –ü–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    let credentials = agent.get_local_credentials();
    assert!(!credentials.ufrag.is_empty());
    assert!(!credentials.pwd.is_empty());
    assert_eq!(credentials.ufrag.len(), 4);
    assert_eq!(credentials.pwd.len(), 22);

    // –°–æ–∑–¥–∞—Ç—å STUN/TURN –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å NAT –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
    let stun_turn_manager = Arc::new(
        create_stun_turn_manager(vec![], vec![], false).await?
    );

    let ice_params = IceParameters::default();
    let nat_manager = Arc::new(
        Sharp3IceIntegration::new(stun_turn_manager, ice_params).await?
    ) as Arc<dyn IceNatManager>;

    // –°–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç —Å NAT –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
    let agent_with_nat = IceAgent::new_with_nat_manager(
        create_p2p_ice_config(),
        nat_manager
    ).await?;

    // –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≥–µ–Ω—Ç
    let start_result = timeout(
        Duration::from_secs(2),
        agent_with_nat.start(IceRole::Controlling)
    ).await;

    match start_result {
        Ok(Ok(())) => {
            info!("‚úÖ ICE –∞–≥–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ");

            // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            let state_after_start = agent_with_nat.get_state().await;
            debug!("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞: {:?}", state_after_start);
        }
        Ok(Err(e)) => {
            debug!("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ICE –∞–≥–µ–Ω—Ç–∞: {} (–æ–∂–∏–¥–∞–µ—Ç—Å—è –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ)", e);
        }
        Err(_) => {
            debug!("‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—É—Å–∫–∞ ICE –∞–≥–µ–Ω—Ç–∞ (–æ–∂–∏–¥–∞–µ—Ç—Å—è –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ)");
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    let stats = agent.get_stats().await;
    assert_eq!(stats.state, SHARP3::nat::ice::IceState::Gathering);

    // –ó–∞–∫—Ä—ã—Ç—å –∞–≥–µ–Ω—Ç—ã
    let _ = agent.close().await;
    let _ = agent_with_nat.close().await;

    info!("‚úÖ –¢–µ—Å—Ç ICE –∞–≥–µ–Ω—Ç–∞ –ø—Ä–æ–π–¥–µ–Ω");
    Ok(())
}

#[tokio::test]
async fn test_ice_session_integration() -> NatResult<()> {
    setup_test_logging();
    info!("üß™ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ICE —Å–µ—Å—Å–∏–∏");

    // –°–æ–∑–¥–∞—Ç—å ICE —Å–µ—Å—Å–∏—é —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
    let ice_config = create_p2p_ice_config();
    let stun_servers = vec!["stun.l.google.com:19302".to_string()];
    let turn_servers = vec![];

    let ice_session = create_ice_session_with_sharp(
        ice_config,
        stun_servers,
        turn_servers
    ).await?;

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
    let agent = ice_session.agent();
    let integration = ice_session.integration();

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    let initial_state = agent.get_state().await;
    assert_eq!(initial_state, SHARP3::nat::ice::IceState::Gathering);

    // –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    let integration_stats = integration.get_stats();
    assert_eq!(integration_stats.total_sessions.load(std::sync::atomic::Ordering::Relaxed), 0);

    // –°–æ–∑–¥–∞—Ç—å —Å–æ–∫–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    let socket = Arc::new(UdpSocket::bind("127.0.0.1:0").await.unwrap());

    // –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–±–æ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    let gathering_result = timeout(
        Duration::from_secs(3),
        ice_session.start_gathering(socket)
    ).await;

    match gathering_result {
        Ok(Ok(())) => {
            info!("‚úÖ –°–±–æ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ");

            // –ü–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
            sleep(Duration::from_millis(200)).await;
            let candidates = ice_session.get_candidates(1).await;
            debug!("–°–æ–±—Ä–∞–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {}", candidates.len());
        }
        Ok(Err(e)) => {
            debug!("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–±–æ—Ä–∞: {} (–æ–∂–∏–¥–∞–µ—Ç—Å—è –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ)", e);
        }
        Err(_) => {
            debug!("‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—É—Å–∫–∞ —Å–±–æ—Ä–∞ (–æ–∂–∏–¥–∞–µ—Ç—Å—è –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ)");
        }
    }

    // –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é
    ice_session.shutdown().await?;

    info!("‚úÖ –¢–µ—Å—Ç ICE —Å–µ—Å—Å–∏–∏ –ø—Ä–æ–π–¥–µ–Ω");
    Ok(())
}

#[tokio::test]
async fn test_nat_system_creation_and_session_management() -> NatResult<()> {
    setup_test_logging();
    info!("üß™ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è NAT —Å–∏—Å—Ç–µ–º—ã –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏");

    // –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã
    let mut config = NatSystemConfig::default();
    config.stun_config.servers = vec!["stun.l.google.com:19302".to_string()];

    // –°–æ–∑–¥–∞—Ç—å NAT —Å–∏—Å—Ç–µ–º—É
    let nat_system = NatSystem::new(config).await?;

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    let initial_stats = nat_system.get_stats();
    assert_eq!(initial_stats.total_sessions.load(std::sync::atomic::Ordering::Relaxed), 0);
    assert_eq!(initial_stats.active_sessions.load(std::sync::atomic::Ordering::Relaxed), 0);

    // –°–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é
    let session_config = create_controlling_session_config(vec![1]);
    let session = nat_system.create_session(session_config).await?;

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞
    assert!(!session.session_id.is_empty());
    assert_eq!(session.config.role, IceRole::Controlling);
    assert_eq!(session.config.components, vec![1]);

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    let updated_stats = nat_system.get_stats();
    assert_eq!(updated_stats.total_sessions.load(std::sync::atomic::Ordering::Relaxed), 1);
    assert_eq!(updated_stats.active_sessions.load(std::sync::atomic::Ordering::Relaxed), 1);

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π
    let sessions = nat_system.list_sessions().await;
    assert_eq!(sessions.len(), 1);
    assert_eq!(sessions[0], session.session_id);

    // –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ ID
    let retrieved_session = nat_system.get_session(&session.session_id).await;
    assert!(retrieved_session.is_some());

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    let session_state = session.get_state().await;
    assert_eq!(session_state, SHARP3::nat::NatSessionState::Initializing);

    // –£–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é
    nat_system.remove_session(&session.session_id).await?;

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —Å–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞
    let final_stats = nat_system.get_stats();
    assert_eq!(final_stats.active_sessions.load(std::sync::atomic::Ordering::Relaxed), 0);

    let sessions_after_removal = nat_system.list_sessions().await;
    assert!(sessions_after_removal.is_empty());

    // –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–∏—Å—Ç–µ–º—É
    nat_system.shutdown().await?;

    info!("‚úÖ –¢–µ—Å—Ç NAT —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–π–¥–µ–Ω");
    Ok(())
}

#[tokio::test]
async fn test_configuration_validation() -> NatResult<()> {
    setup_test_logging();
    info!("üß™ –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π");

    // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ NAT –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    let valid_config = NatSystemConfig::default();
    assert!(SHARP3::nat::validate_nat_config(&valid_config).is_ok());

    // –¢–µ—Å—Ç –Ω–µ–≤–µ—Ä–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ - –Ω—É–ª–µ–≤–æ–π —Ç–∞–π–º–∞—É—Ç
    let mut invalid_config = NatSystemConfig::default();
    invalid_config.timeouts.stun_timeout = Duration::ZERO;

    let validation_result = SHARP3::nat::validate_nat_config(&invalid_config);
    assert!(validation_result.is_err());
    if let Err(NatError::Configuration(msg)) = validation_result {
        assert!(msg.contains("—Ç–∞–π–º–∞—É—Ç"));
    }

    // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ICE –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    let valid_ice_config = create_p2p_ice_config();
    assert!(validate_ice_config(&valid_ice_config).is_ok());

    // –¢–µ—Å—Ç –Ω–µ–≤–µ—Ä–Ω–æ–π ICE –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ - –ø—É—Å—Ç—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    let mut invalid_ice_config = IceConfig::default();
    invalid_ice_config.components.clear();

    let ice_validation_result = validate_ice_config(&invalid_ice_config);
    assert!(ice_validation_result.is_err());
    if let Err(NatError::Configuration(msg)) = ice_validation_result {
        assert!(msg.contains("–∫–æ–º–ø–æ–Ω–µ–Ω—Ç"));
    }

    // –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ TURN URL
    let valid_turn = SHARP3::nat::parse_turn_server_url(
        "turn:example.com:3478",
        "user",
        "pass"
    );
    assert!(valid_turn.is_ok());

    let invalid_turn = SHARP3::nat::parse_turn_server_url(
        "invalid-url",
        "user",
        "pass"
    );
    assert!(invalid_turn.is_err());

    info!("‚úÖ –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ø—Ä–æ–π–¥–µ–Ω");
    Ok(())
}

#[tokio::test]
async fn test_error_propagation_and_handling() -> NatResult<()> {
    setup_test_logging();
    info!("üß™ –¢–µ—Å—Ç —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫");

    // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Å –Ω–µ–≤–µ—Ä–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    let mut bad_config = NatSystemConfig::default();
    bad_config.timeouts.connection_timeout = Duration::from_millis(1); // –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π

    let system_result = NatSystem::new(bad_config).await;
    assert!(system_result.is_err());

    // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è STUN/TURN –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å –ø—É—Å—Ç—ã–º–∏ —Å–µ—Ä–≤–µ—Ä–∞–º–∏
    let manager_result = create_stun_turn_manager(
        vec![], // –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ STUN —Å–µ—Ä–≤–µ—Ä–æ–≤
        vec![],
        false
    ).await;

    // –î–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–∂–µ —Å –ø—É—Å—Ç—ã–º–∏ —Å–µ—Ä–≤–µ—Ä–∞–º–∏
    assert!(manager_result.is_ok());
    if let Ok(manager) = manager_result {
        manager.shutdown().await?;
    }

    // –¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–∫–µ—Ç–∞ –∞–¥—Ä–µ—Å–∞
    let bind_result = UdpSocket::bind("256.256.256.256:0").await;
    assert!(bind_result.is_err());

    info!("‚úÖ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–æ–π–¥–µ–Ω");
    Ok(())
}

#[tokio::test]
async fn test_concurrent_operations() -> NatResult<()> {
    setup_test_logging();
    info!("üß™ –¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π");

    // –°–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ STUN/TURN –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    let handles: Vec<_> = (0..3).map(|i| {
        tokio::spawn(async move {
            let stun_servers = vec![format!("stun{}.l.google.com:19302", i % 4 + 1)];
            let manager = create_stun_turn_manager(stun_servers, vec![], false).await?;

            // –í—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            let socket = Arc::new(UdpSocket::bind("127.0.0.1:0").await.unwrap());
            let _stats = manager.get_stats();

            // –ó–∞–≤–µ—Ä—à–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä
            manager.shutdown().await?;

            Ok::<_, NatError>(())
        })
    }).collect();

    // –î–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
    for handle in handles {
        let result = handle.await.unwrap();
        assert!(result.is_ok());
    }

    // –¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è ICE –∞–≥–µ–Ω—Ç–æ–≤
    let ice_handles: Vec<_> = (0..3).map(|_| {
        tokio::spawn(async move {
            let config = create_p2p_ice_config();
            let agent = IceAgent::new(config).await?;

            let _credentials = agent.get_local_credentials();
            let _state = agent.get_state().await;

            agent.close().await?;

            Ok::<_, NatError>(())
        })
    }).collect();

    for handle in ice_handles {
        let result = handle.await.unwrap();
        assert!(result.is_ok());
    }

    info!("‚úÖ –¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø—Ä–æ–π–¥–µ–Ω");
    Ok(())
}

#[tokio::test]
async fn test_resource_cleanup() -> NatResult<()> {
    setup_test_logging();
    info!("üß™ –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤");

    // –°–æ–∑–¥–∞—Ç—å –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å STUN/TURN –º–µ–Ω–µ–¥–∂–µ—Ä
    {
        let manager = create_stun_turn_manager(
            vec!["stun.l.google.com:19302".to_string()],
            vec![],
            false
        ).await?;

        let initial_stats = manager.get_stats();
        debug!("–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: –∞–∫—Ç–∏–≤–Ω—ã–µ allocations = {}",
               initial_stats.active_turn_allocations.load(std::sync::atomic::Ordering::Relaxed));

        manager.shutdown().await?;

        let final_stats = manager.get_stats();
        debug!("–§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: –∞–∫—Ç–∏–≤–Ω—ã–µ allocations = {}",
               final_stats.active_turn_allocations.load(std::sync::atomic::Ordering::Relaxed));
    } // manager –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–¥–∞–ª–µ–Ω –∑–¥–µ—Å—å

    // –°–æ–∑–¥–∞—Ç—å –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å ICE –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
    {
        let stun_turn_manager = Arc::new(
            create_stun_turn_manager(vec![], vec![], false).await?
        );

        let integration = Sharp3IceIntegration::new(
            stun_turn_manager.clone(),
            IceParameters::default()
        ).await?;

        let initial_sessions = integration.get_stats().total_sessions.load(std::sync::atomic::Ordering::Relaxed);
        debug!("–ù–∞—á–∞–ª—å–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {}", initial_sessions);

        integration.shutdown().await?;
        stun_turn_manager.shutdown().await?;

        let final_sessions = integration.get_stats().active_sessions.load(std::sync::atomic::Ordering::Relaxed);
        debug!("–§–∏–Ω–∞–ª—å–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏: {}", final_sessions);
    } // integration –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–∞ –∑–¥–µ—Å—å

    // –°–æ–∑–¥–∞—Ç—å –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å NAT —Å–∏—Å—Ç–µ–º—É
    {
        let config = NatSystemConfig::default();
        let nat_system = NatSystem::new(config).await?;

        let session_config = create_controlling_session_config(vec![1]);
        let session = nat_system.create_session(session_config).await?;

        let active_sessions_before = nat_system.get_stats().active_sessions.load(std::sync::atomic::Ordering::Relaxed);
        debug!("–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {}", active_sessions_before);

        nat_system.shutdown().await?;

        let active_sessions_after = nat_system.get_stats().active_sessions.load(std::sync::atomic::Ordering::Relaxed);
        debug!("–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {}", active_sessions_after);
        assert_eq!(active_sessions_after, 0);
    } // nat_system –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–∞ –∑–¥–µ—Å—å

    info!("‚úÖ –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–æ–π–¥–µ–Ω");
    Ok(())
}

/// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ TURN —Å–µ—Ä–≤–µ—Ä–∞
#[allow(dead_code)]
fn create_test_turn_server() -> TurnServerInfo {
    TurnServerInfo {
        url: "turn:localhost:3478".to_string(),
        username: "testuser".to_string(),
        password: "testpass".to_string(),
        realm: Some("testrealm".to_string()),
        transport: TurnTransport::Udp,
        priority: 100,
    }
}

/// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
#[tokio::test]
async fn test_full_system_integration() -> NatResult<()> {
    setup_test_logging();
    info!("üß™ –ü–æ–ª–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã");

    let test_timeout = Duration::from_secs(10);

    let test_result = timeout(test_timeout, async {
        // –°–æ–∑–¥–∞—Ç—å P2P NAT —Å–∏—Å—Ç–µ–º—É
        let stun_servers = default_stun_servers();
        let turn_servers = vec![]; // –ë–µ–∑ TURN –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Ç–µ—Å—Ç–∞

        let nat_system = SHARP3::nat::create_p2p_nat_system(stun_servers, turn_servers).await?;

        // –°–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é
        let session_config = create_controlling_session_config(vec![1]);
        let session = nat_system.create_session(session_config).await?;

        // –°–æ–∑–¥–∞—Ç—å —Å–æ–∫–µ—Ç
        let socket = Arc::new(UdpSocket::bind("127.0.0.1:0").await.unwrap());

        // –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        let mut system_events = nat_system.subscribe();
        let mut session_events = session.subscribe();

        // –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        nat_system.start_connection(session.clone(), socket).await?;

        // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏–π
        let mut event_count = 0;
        let max_events = 5;

        while event_count < max_events {
            tokio::select! {
                system_event = system_events.recv() => {
                    if let Ok(event) = system_event {
                        debug!("–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: {:?}", event);
                        event_count += 1;
                    }
                }
                session_event = session_events.recv() => {
                    if let Ok(event) = session_event {
                        debug!("–°–æ–±—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏: {:?}", event);
                        event_count += 1;
                    }
                }
                _ = sleep(Duration::from_millis(100)) => {
                    event_count += 1; // –°—á–∏—Ç–∞—Ç—å —Ç–∞–π–º–∞—É—Ç—ã –∫–∞–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
                }
            }
        }

        // –ü–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        let final_stats = nat_system.get_stats();
        debug!("–§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: —Å–µ—Å—Å–∏–∏={}, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è={}",
               final_stats.total_sessions.load(std::sync::atomic::Ordering::Relaxed),
               final_stats.successful_connections.load(std::sync::atomic::Ordering::Relaxed));

        // –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–∏—Å—Ç–µ–º—É
        nat_system.shutdown().await?;

        Ok::<_, NatError>(())
    }).await;

    match test_result {
        Ok(Ok(())) => {
            info!("‚úÖ –ü–æ–ª–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω");
        }
        Ok(Err(e)) => {
            debug!("‚ö†Ô∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {} (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ–∂–∏–¥–∞–µ–º–æ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ)", e);
        }
        Err(_) => {
            debug!("‚è∞ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ø–æ —Ç–∞–π–º–∞—É—Ç—É (–æ–∂–∏–¥–∞–µ—Ç—Å—è –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ)");
        }
    }

    Ok(())
}