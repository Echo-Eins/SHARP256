// examples/nat_system_usage.rs
//! –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π NAT —Å–∏—Å—Ç–µ–º—ã SHARP3
//!
//! –≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é NAT —Å–∏—Å—Ç–µ–º—É
//! –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –º–µ–∂–¥—É –¥–≤—É–º—è —É–∑–ª–∞–º–∏.

use std::net::SocketAddr;
use std::sync::Arc;
use std::time::Duration;
use tokio::net::UdpSocket;
use tokio::time::{sleep, timeout};
use tracing::{info, warn, error, debug};

use SHARP3::nat::{
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã —Å–∏—Å—Ç–µ–º—ã
    NatSystem, NatSystemConfig, NatSessionConfig,

    // –ú–µ–Ω–µ–¥–∂–µ—Ä—ã
    create_stun_turn_manager, create_ice_session_with_sharp,

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    TurnServerInfo, TurnTransport, IceRole,

    // –£—Ç–∏–ª–∏—Ç—ã
    default_stun_servers, parse_turn_server_url,
    create_controlling_session_config, create_controlled_session_config,
    create_p2p_nat_system,

    // –°–æ–±—ã—Ç–∏—è
    NatSystemEvent, NatSessionEvent, IceIntegrationEvent,

    // –û—à–∏–±–∫–∏
    NatResult, NatError,
};

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    SHARP3::init_logging("debug");

    info!("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è NAT —Å–∏—Å—Ç–µ–º—ã SHARP3");

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    demo_basic_nat_system().await?;
    demo_stun_turn_manager().await?;
    demo_ice_integration().await?;
    demo_full_p2p_connection().await?;

    info!("‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ");
    Ok(())
}

/// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–π NAT —Å–∏—Å—Ç–µ–º—ã
async fn demo_basic_nat_system() -> NatResult<()> {
    info!("üì° –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–π NAT —Å–∏—Å—Ç–µ–º—ã");

    // –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã
    let mut config = NatSystemConfig::default();
    config.stun_config.servers = default_stun_servers();

    // –î–æ–±–∞–≤–∏—Ç—å TURN —Å–µ—Ä–≤–µ—Ä—ã (–ø—Ä–∏–º–µ—Ä)
    config.turn_servers = vec![
        parse_turn_server_url(
            "turn:turn.example.com:3478",
            "username",
            "password"
        )?,
    ];

    // –°–æ–∑–¥–∞—Ç—å NAT —Å–∏—Å—Ç–µ–º—É
    let nat_system = Arc::new(NatSystem::new(config).await?);

    // –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Å–∏—Å—Ç–µ–º—ã
    let mut system_events = nat_system.subscribe();

    // –°–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é –¥–ª—è controlling –∞–≥–µ–Ω—Ç–∞
    let session_config = create_controlling_session_config(vec![1]); // RTP –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    let session = nat_system.create_session(session_config).await?;

    info!("–°–æ–∑–¥–∞–Ω–∞ NAT —Å–µ—Å—Å–∏—è: {}", session.session_id);

    // –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏
    let mut session_events = session.subscribe();

    // –°–æ–∑–¥–∞—Ç—å —Å–æ–∫–µ—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    let socket = Arc::new(UdpSocket::bind("0.0.0.0:0").await?);
    info!("–°–æ–∑–¥–∞–Ω —Å–æ–∫–µ—Ç: {}", socket.local_addr()?);

    // –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    nat_system.start_connection(session.clone(), socket).await?;

    // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    let events_task = tokio::spawn(async move {
        let mut timeout_count = 0;

        loop {
            tokio::select! {
                event = system_events.recv() => {
                    match event {
                        Ok(NatSystemEvent::SessionCreated { session_id }) => {
                            info!("üéØ –°–∏—Å—Ç–µ–º–∞: –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ - {}", session_id);
                        }
                        Ok(NatSystemEvent::SessionConnected { session_id, result }) => {
                            info!("üéâ –°–∏—Å—Ç–µ–º–∞: –°–µ—Å—Å–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∞ - {} ({:?})",
                                  session_id, result.connection_strategy);
                            break;
                        }
                        Ok(NatSystemEvent::SessionFailed { session_id, error }) => {
                            warn!("‚ùå –°–∏—Å—Ç–µ–º–∞: –°–µ—Å—Å–∏—è –Ω–µ—É–¥–∞—á–Ω–∞ - {} ({})", session_id, error);
                            break;
                        }
                        Ok(event) => {
                            debug!("üì® –°–∏—Å—Ç–µ–º–∞: {:?}", event);
                        }
                        Err(_) => {
                            timeout_count += 1;
                            if timeout_count > 10 {
                                warn!("‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π —Å–∏—Å—Ç–µ–º—ã");
                                break;
                            }
                        }
                    }
                }

                event = session_events.recv() => {
                    match event {
                        Ok(NatSessionEvent::StateChanged { old_state, new_state }) => {
                            info!("üîÑ –°–µ—Å—Å–∏—è: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å {:?} -> {:?}", old_state, new_state);
                        }
                        Ok(NatSessionEvent::CandidateGathered { component_id, candidate }) => {
                            info!("üéØ –°–µ—Å—Å–∏—è: –ö–∞–Ω–¥–∏–¥–∞—Ç —Å–æ–±—Ä–∞–Ω –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ {} - {:?}",
                                  component_id, candidate.candidate_type);
                        }
                        Ok(event) => {
                            debug!("üì® –°–µ—Å—Å–∏—è: {:?}", event);
                        }
                        Err(_) => {
                            // –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                        }
                    }
                }

                _ = sleep(Duration::from_secs(10)) => {
                    info!("‚è∞ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É");
                    break;
                }
            }
        }
    });

    // –î–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
    let _ = timeout(Duration::from_secs(15), events_task).await;

    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    let stats = nat_system.get_stats();
    info!("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ NAT —Å–∏—Å—Ç–µ–º—ã:");
    info!("  - –û–±—â–∏–µ —Å–µ—Å—Å–∏–∏: {}", stats.total_sessions.load(std::sync::atomic::Ordering::Relaxed));
    info!("  - –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏: {}", stats.active_sessions.load(std::sync::atomic::Ordering::Relaxed));
    info!("  - –£—Å–ø–µ—à–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {}", stats.successful_connections.load(std::sync::atomic::Ordering::Relaxed));

    // –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–∏—Å—Ç–µ–º—É
    nat_system.shutdown().await?;
    info!("‚úÖ –ë–∞–∑–æ–≤–∞—è NAT —Å–∏—Å—Ç–µ–º–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞");

    Ok(())
}

/// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è STUN/TURN –º–µ–Ω–µ–¥–∂–µ—Ä–∞
async fn demo_stun_turn_manager() -> NatResult<()> {
    info!("üåê –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è STUN/TURN –º–µ–Ω–µ–¥–∂–µ—Ä–∞");

    // –°–æ–∑–¥–∞—Ç—å STUN/TURN –º–µ–Ω–µ–¥–∂–µ—Ä
    let stun_servers = default_stun_servers();
    let turn_servers = vec![]; // –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏

    let manager = Arc::new(
        create_stun_turn_manager(stun_servers, turn_servers, false).await?
    );

    // –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
    let mut events = manager.subscribe();

    // –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Å–æ–∫–µ—Ç
    let socket = Arc::new(UdpSocket::bind("0.0.0.0:0").await?);
    let component_id = 1;

    info!("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤...");

    // –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–ª—É—á–∏—Ç—å server reflexive –∫–∞–Ω–¥–∏–¥–∞—Ç
    match manager.get_server_reflexive_candidate(socket.clone(), component_id).await {
        Ok(Some(candidate)) => {
            info!("üéØ –ü–æ–ª—É—á–µ–Ω server reflexive –∫–∞–Ω–¥–∏–¥–∞—Ç: {}:{} ({})",
                  candidate.address.ip, candidate.address.port, candidate.foundation);
        }
        Ok(None) => {
            info!("‚ÑπÔ∏è Server reflexive –∫–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω");
        }
        Err(e) => {
            warn!("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è server reflexive –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {}", e);
        }
    }

    // –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–ª—É—á–∏—Ç—å relay –∫–∞–Ω–¥–∏–¥–∞—Ç (–æ–∂–∏–¥–∞–µ—Ç—Å—è –Ω–µ—É–¥–∞—á–∞ –±–µ–∑ TURN —Å–µ—Ä–≤–µ—Ä–æ–≤)
    match manager.get_relay_candidate(socket, component_id).await {
        Ok(Some(candidate)) => {
            info!("üéØ –ü–æ–ª—É—á–µ–Ω relay –∫–∞–Ω–¥–∏–¥–∞—Ç: {}:{} ({})",
                  candidate.address.ip, candidate.address.port, candidate.foundation);
        }
        Ok(None) => {
            info!("‚ÑπÔ∏è Relay –∫–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω (–æ–∂–∏–¥–∞–µ—Ç—Å—è –±–µ–∑ TURN —Å–µ—Ä–≤–µ—Ä–æ–≤)");
        }
        Err(e) => {
            warn!("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è relay –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {}", e);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    tokio::spawn(async move {
        for _ in 0..5 {
            match timeout(Duration::from_secs(1), events.recv()).await {
                Ok(Ok(event)) => {
                    debug!("üì® STUN/TURN —Å–æ–±—ã—Ç–∏–µ: {:?}", event);
                }
                _ => break,
            }
        }
    });

    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    let stats = manager.get_stats();
    info!("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ STUN/TURN:");
    info!("  - STUN –∑–∞–ø—Ä–æ—Å—ã: {}", stats.stun_requests.load(std::sync::atomic::Ordering::Relaxed));
    info!("  - STUN —É—Å–ø–µ—Ö–∏: {}", stats.stun_successes.load(std::sync::atomic::Ordering::Relaxed));
    info!("  - TURN –∑–∞–ø—Ä–æ—Å—ã: {}", stats.turn_allocation_requests.load(std::sync::atomic::Ordering::Relaxed));

    // –ó–∞–≤–µ—Ä—à–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä
    manager.shutdown().await?;
    info!("‚úÖ STUN/TURN –º–µ–Ω–µ–¥–∂–µ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞");

    Ok(())
}

/// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è ICE –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
async fn demo_ice_integration() -> NatResult<()> {
    info!("üßä –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è ICE –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏");

    // –°–æ–∑–¥–∞—Ç—å ICE —Å–µ—Å—Å–∏—é —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
    let ice_config = SHARP3::nat::ice::create_p2p_ice_config();
    let stun_servers = default_stun_servers();
    let turn_servers = vec![];

    let ice_session = Arc::new(
        create_ice_session_with_sharp(ice_config, stun_servers, turn_servers).await?
    );

    // –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è ICE
    let mut ice_events = ice_session.subscribe_ice_events();

    // –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    let mut integration_events = ice_session.subscribe_integration_events().await;

    // –°–æ–∑–¥–∞—Ç—å —Å–æ–∫–µ—Ç –¥–ª—è —Å–±–æ—Ä–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    let socket = Arc::new(UdpSocket::bind("0.0.0.0:0").await?);

    info!("–ó–∞–ø—É—Å–∫ ICE —Å–µ—Å—Å–∏–∏...");

    // –ó–∞–ø—É—Å—Ç–∏—Ç—å ICE –∫–∞–∫ controlling –∞–≥–µ–Ω—Ç
    ice_session.start(IceRole::Controlling).await?;

    // –ù–∞—á–∞—Ç—å —Å–±–æ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    ice_session.start_gathering(socket).await?;

    // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–±—ã—Ç–∏—è
    let events_task = tokio::spawn(async move {
        let mut ice_candidates = 0;
        let mut integration_events_count = 0;

        loop {
            tokio::select! {
                event = ice_events.recv() => {
                    match event {
                        Ok(event) => {
                            match event {
                                SHARP3::nat::ice::IceEvent::CandidateAdded { candidate, component_id } => {
                                    ice_candidates += 1;
                                    info!("üéØ ICE: –ö–∞–Ω–¥–∏–¥–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ {} - {:?} ({}:{})",
                                          component_id, candidate.candidate_type,
                                          candidate.address.ip, candidate.address.port);
                                }
                                SHARP3::nat::ice::IceEvent::GatheringCompleted { component_id, candidate_count } => {
                                    info!("‚úÖ ICE: –°–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ {} - {} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤",
                                          component_id, candidate_count);
                                }
                                SHARP3::nat::ice::IceEvent::StateChanged { old_state, new_state } => {
                                    info!("üîÑ ICE: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å {:?} -> {:?}", old_state, new_state);
                                }
                                _ => {
                                    debug!("üì® ICE —Å–æ–±—ã—Ç–∏–µ: {:?}", event);
                                }
                            }
                        }
                        Err(_) => break,
                    }
                }

                event = integration_events.recv() => {
                    match event {
                        Ok(event) => {
                            integration_events_count += 1;
                            match event {
                                IceIntegrationEvent::GatheringSessionStarted { session_id, component_id } => {
                                    info!("üöÄ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: –ù–∞—á–∞—Ç–∞ —Å–µ—Å—Å–∏—è —Å–±–æ—Ä–∞ {} –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ {}",
                                          session_id, component_id);
                                }
                                IceIntegrationEvent::GatheringSessionCompleted { session_id, component_id, candidates_count, duration } => {
                                    info!("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: –ó–∞–≤–µ—Ä—à–µ–Ω–∞ —Å–µ—Å—Å–∏—è {} –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ {} - {} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∑–∞ {}ms",
                                          session_id, component_id, candidates_count, duration.as_millis());
                                }
                                IceIntegrationEvent::CandidateGathered { candidate, candidate_type, .. } => {
                                    info!("üéØ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: –°–æ–±—Ä–∞–Ω –∫–∞–Ω–¥–∏–¥–∞—Ç {:?} ({}:{})",
                                          candidate_type, candidate.address.ip, candidate.address.port);
                                }
                                _ => {
                                    debug!("üì® –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–µ: {:?}", event);
                                }
                            }
                        }
                        Err(_) => break,
                    }
                }

                _ = sleep(Duration::from_secs(8)) => {
                    info!("‚è∞ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è ICE –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É");
                    info!("üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {} ICE —Å–æ–±—ã—Ç–∏–π –∏ {} —Å–æ–±—ã—Ç–∏–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
                          ice_candidates, integration_events_count);
                    break;
                }
            }
        }
    });

    // –î–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    let _ = timeout(Duration::from_secs(10), events_task).await;

    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    let ice_stats = ice_session.get_integration_stats();
    info!("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ICE –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:");
    info!("  - –û–±—â–∏–µ —Å–µ—Å—Å–∏–∏: {}", ice_stats.total_sessions.load(std::sync::atomic::Ordering::Relaxed));
    info!("  - –û–±—â–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã: {}", ice_stats.total_candidates.load(std::sync::atomic::Ordering::Relaxed));
    info!("  - Host –∫–∞–Ω–¥–∏–¥–∞—Ç—ã: {}", ice_stats.host_candidates.load(std::sync::atomic::Ordering::Relaxed));
    info!("  - Server reflexive: {}", ice_stats.server_reflexive_candidates.load(std::sync::atomic::Ordering::Relaxed));
    info!("  - Relay –∫–∞–Ω–¥–∏–¥–∞—Ç—ã: {}", ice_stats.relay_candidates.load(std::sync::atomic::Ordering::Relaxed));

    // –ü–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
    let candidates = ice_session.get_candidates(1).await;
    info!("üìã –°–æ–±—Ä–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ 1:");
    for (i, candidate) in candidates.iter().enumerate() {
        info!("  {}. {:?} - {}:{} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {})",
              i + 1, candidate.candidate_type,
              candidate.address.ip, candidate.address.port, candidate.priority);
    }

    // –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é
    ice_session.shutdown().await?;
    info!("‚úÖ ICE –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞");

    Ok(())
}

/// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
async fn demo_full_p2p_connection() -> NatResult<()> {
    info!("ü§ù –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è");

    // –°–æ–∑–¥–∞—Ç—å P2P –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é NAT —Å–∏—Å—Ç–µ–º—É
    let stun_servers = default_stun_servers();
    let turn_servers = vec![]; // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –±–µ–∑ TURN

    // –°–æ–∑–¥–∞—Ç—å –¥–≤–µ NAT —Å–∏—Å—Ç–µ–º—ã (–∏–º–∏—Ç–∞—Ü–∏—è –¥–≤—É—Ö —É–∑–ª–æ–≤)
    let nat_system_a = Arc::new(
        create_p2p_nat_system(stun_servers.clone(), turn_servers.clone()).await?
    );
    let nat_system_b = Arc::new(
        create_p2p_nat_system(stun_servers, turn_servers).await?
    );

    info!("–°–æ–∑–¥–∞–Ω—ã –¥–≤–µ NAT —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è");

    // –°–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏–∏
    let session_config_a = create_controlling_session_config(vec![1]);
    let session_config_b = create_controlled_session_config(vec![1]);

    let session_a = nat_system_a.create_session(session_config_a).await?;
    let session_b = nat_system_b.create_session(session_config_b).await?;

    info!("–°–æ–∑–¥–∞–Ω—ã —Å–µ—Å—Å–∏–∏: A={}, B={}", session_a.session_id, session_b.session_id);

    // –°–æ–∑–¥–∞—Ç—å —Å–æ–∫–µ—Ç—ã
    let socket_a = Arc::new(UdpSocket::bind("127.0.0.1:0").await?);
    let socket_b = Arc::new(UdpSocket::bind("127.0.0.1:0").await?);

    info!("–°–æ–∑–¥–∞–Ω—ã —Å–æ–∫–µ—Ç—ã: A={}, B={}", socket_a.local_addr()?, socket_b.local_addr()?);

    // –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
    let mut events_a = session_a.subscribe();
    let mut events_b = session_b.subscribe();

    // –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    nat_system_a.start_connection(session_a.clone(), socket_a).await?;
    nat_system_b.start_connection(session_b.clone(), socket_b).await?;

    info!("–ó–∞–ø—É—â–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –æ–±–µ–∏—Ö —Å–µ—Å—Å–∏–π");

    // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –æ–±–µ–∏—Ö —Å–µ—Å—Å–∏–π
    let connection_task = tokio::spawn(async move {
        let mut session_a_connected = false;
        let mut session_b_connected = false;
        let mut timeout_count = 0;

        loop {
            tokio::select! {
                event_a = events_a.recv() => {
                    match event_a {
                        Ok(NatSessionEvent::StateChanged { new_state, .. }) => {
                            info!("üîÑ –°–µ—Å—Å–∏—è A: –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {:?}", new_state);
                            if new_state == SHARP3::nat::NatSessionState::Connected {
                                session_a_connected = true;
                            }
                        }
                        Ok(NatSessionEvent::CandidateGathered { component_id, candidate }) => {
                            info!("üéØ –°–µ—Å—Å–∏—è A: –ö–∞–Ω–¥–∏–¥–∞—Ç –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ {} - {:?}",
                                  component_id, candidate.candidate_type);
                        }
                        Ok(event) => {
                            debug!("üì® –°–µ—Å—Å–∏—è A: {:?}", event);
                        }
                        Err(_) => {
                            timeout_count += 1;
                        }
                    }
                }

                event_b = events_b.recv() => {
                    match event_b {
                        Ok(NatSessionEvent::StateChanged { new_state, .. }) => {
                            info!("üîÑ –°–µ—Å—Å–∏—è B: –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {:?}", new_state);
                            if new_state == SHARP3::nat::NatSessionState::Connected {
                                session_b_connected = true;
                            }
                        }
                        Ok(NatSessionEvent::CandidateGathered { component_id, candidate }) => {
                            info!("üéØ –°–µ—Å—Å–∏—è B: –ö–∞–Ω–¥–∏–¥–∞—Ç –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ {} - {:?}",
                                  component_id, candidate.candidate_type);
                        }
                        Ok(event) => {
                            debug!("üì® –°–µ—Å—Å–∏—è B: {:?}", event);
                        }
                        Err(_) => {
                            timeout_count += 1;
                        }
                    }
                }

                _ = sleep(Duration::from_secs(1)) => {
                    timeout_count += 1;
                    if timeout_count > 15 {
                        info!("‚è∞ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è P2P –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É");
                        break;
                    }
                }
            }

            if session_a_connected && session_b_connected {
                info!("üéâ –û–±–µ —Å–µ—Å—Å–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!");
                break;
            }
        }

        (session_a_connected, session_b_connected)
    });

    // –î–æ–∂–¥–∞—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    let (connected_a, connected_b) = timeout(Duration::from_secs(20), connection_task)
        .await
        .unwrap_or((false, false));

    // –ü–æ–ª—É—á–∏—Ç—å –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–π
    let state_a = session_a.get_state().await;
    let state_b = session_b.get_state().await;

    info!("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:");
    info!("  - –°–µ—Å—Å–∏—è A: —Å–æ—Å—Ç–æ—è–Ω–∏–µ={:?}, —Å–æ–µ–¥–∏–Ω–µ–Ω–∞={}", state_a, connected_a);
    info!("  - –°–µ—Å—Å–∏—è B: —Å–æ—Å—Ç–æ—è–Ω–∏–µ={:?}, —Å–æ–µ–¥–∏–Ω–µ–Ω–∞={}", state_b, connected_b);

    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±–µ–∏—Ö —Å–∏—Å—Ç–µ–º
    let stats_a = nat_system_a.get_stats();
    let stats_b = nat_system_b.get_stats();

    info!("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã A:");
    info!("  - –£—Å–ø–µ—à–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {}", stats_a.successful_connections.load(std::sync::atomic::Ordering::Relaxed));
    info!("  - –ù–µ—É–¥–∞—á–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {}", stats_a.failed_connections.load(std::sync::atomic::Ordering::Relaxed));

    info!("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã B:");
    info!("  - –£—Å–ø–µ—à–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {}", stats_b.successful_connections.load(std::sync::atomic::Ordering::Relaxed));
    info!("  - –ù–µ—É–¥–∞—á–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {}", stats_b.failed_connections.load(std::sync::atomic::Ordering::Relaxed));

    // –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–∏—Å—Ç–µ–º—ã
    nat_system_a.shutdown().await?;
    nat_system_b.shutdown().await?;

    info!("‚úÖ –ü–æ–ª–Ω–∞—è P2P –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞");

    Ok(())
}

/// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
#[allow(dead_code)]
async fn demo_error_handling() -> NatResult<()> {
    info!("‚ö†Ô∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫");

    // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å NAT —Å–∏—Å—Ç–µ–º—É —Å –Ω–µ–≤–µ—Ä–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    let mut bad_config = NatSystemConfig::default();
    bad_config.timeouts.connection_timeout = Duration::ZERO; // –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞–π–º–∞—É—Ç

    match NatSystem::new(bad_config).await {
        Ok(_) => {
            warn!("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ: —Å–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å –Ω–µ–≤–µ—Ä–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π");
        }
        Err(NatError::Configuration(msg)) => {
            info!("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {}", msg);
        }
        Err(e) => {
            warn!("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –æ—à–∏–±–∫–∏: {:?}", e);
        }
    }

    // –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–≤–µ—Ä–Ω—ã–π TURN URL
    match parse_turn_server_url("invalid-url", "user", "pass") {
        Ok(_) => {
            warn!("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ: –Ω–µ–≤–µ—Ä–Ω—ã–π URL –ø—Ä–∏–Ω—è—Ç");
        }
        Err(NatError::Configuration(msg)) => {
            info!("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ URL: {}", msg);
        }
        Err(e) => {
            warn!("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –æ—à–∏–±–∫–∏: {:?}", e);
        }
    }

    info!("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
    Ok(())
}

/// –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
#[allow(dead_code)]
fn format_session_state(state: &SHARP3::nat::NatSessionState) -> &'static str {
    match state {
        SHARP3::nat::NatSessionState::Initializing => "üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è",
        SHARP3::nat::NatSessionState::GatheringCandidates => "üéØ –°–±–æ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤",
        SHARP3::nat::NatSessionState::Connecting => "üîó –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ",
        SHARP3::nat::NatSessionState::Connected => "‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–æ",
        SHARP3::nat::NatSessionState::Reconnecting => "üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
        SHARP3::nat::NatSessionState::Failed(_) => "‚ùå –ù–µ—É–¥–∞—á–Ω–æ",
        SHARP3::nat::NatSessionState::Closed => "üîí –ó–∞–∫—Ä—ã—Ç–æ",
    }
}